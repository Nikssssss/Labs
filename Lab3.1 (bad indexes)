#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int hash(char *a, int l, int r) {
	int sum = 0;
	int t = 1;
	for (int i = l; i < r; i++) {
		sum = sum + (a[i] % 3) * t;
		t *= 3;
	}
	return sum;
}

int nextHash(char *a, int sum, int l, int r) {
	int t = 1;
	int hash;
	for (int i = l; i < r - 1; i++) {
		t *= 3;
	}
	hash = ((sum - (a[l - 1] % 3)) / 3) + a[r - 1] % 3 * t;
	return hash;
}

int isEqual(char *a, char *b, int l, int r, int differ) {
	int flag = 1;
	for (int i = l; i < r; i++) {
		if (a[i - differ] != b[i]) {
			flag = 0;
			break;
		}
	}
	return flag;
}

void printResult(int finalHash, int l, int r) {
	printf("%d ", finalHash);
	for (int i = l; i < r; i++) {
		printf("%d ", i);
	}
}

int main() {
	char pattern[17] = { '\0' };
	char str[1000] = { '\0' };
	
	gets(pattern);
	gets(str);

	int patLen = strlen(pattern);
	int strLen = strlen(str);

	int i = 0;
	int differ = 0;
	int patternHash = hash(pattern, 0, patLen);
	int strHash = hash(str, 0, patLen);
	
	while (i < strLen) {
		if (strHash == patternHash) {
			int flag = isEqual(pattern, str, i, patLen, differ);
			if (flag == 1){
				printResult(patternHash, i, patLen);
				break;
			}
			else {
				i++;
				patLen++;
				differ++;
				strHash = nextHash(str, strHash, i, patLen);
			}
		}
		else {
			i++;
			patLen++;
			differ++;
			strHash = nextHash(str, strHash, i, patLen);
		}
	}
	return 0;
}
